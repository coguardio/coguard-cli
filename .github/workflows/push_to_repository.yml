name: Push coguard-cli image to repository

on:
  workflow_dispatch:

permissions:
  actions: none
  checks: read
  contents: read
  deployments: none
  id-token: none
  issues: none
  discussions: none
  packages: none
  pages: none
  pull-requests: read
  repository-projects: none
  security-events: none
  statuses: read

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
    - name: Checkout repository
      uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11
      with:
          submodules: true

    - name: find_version_tag
      run: |
        CURRENT_COGUARD_VERSION=$(grep version setup.cfg | awk -F' = ' '{print $2}');
        echo "CURRENT_COGUARD_VERSION=$CURRENT_COGUARD_VERSION" >> $GITHUB_ENV;

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@f95db51fddba0c2d1ec667646a06c2ce06100226

    - name: Login to ECR
      uses: docker/login-action@343f7c4344506bcbf9b4de18042ae17996df046d
      with:
        registry: ${{ secrets.ECR_ACCOUNT_ID }}.dkr.ecr.ca-central-1.amazonaws.com
        username: ${{ secrets.AWS_ACCESS_KEY_ID }}
        password: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

    - name: Build, tag, and push image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ secrets.ECR_ACCOUNT_ID }}.dkr.ecr.ca-central-1.amazonaws.com
        IMAGE_TAG: ${{ env.CURRENT_COGUARD_VERSION }}
      run: |
          docker build --build-arg COGUARD_VERSION=${{ env.CURRENT_COGUARD_VERSION }} -t ${{ env.ECR_REGISTRY }}/coguard-cli:${{ env.IMAGE_TAG }} docker
          docker push ${{ env.ECR_REGISTRY }}/coguard-cli:${{ env.IMAGE_TAG }}
